start: (NEWLINE|statement|funcdef)+ ;
identifier: NAME;
statement: assign|var|vardec|expr|ret|func|_if ;
funcdef: (identifier) '\(' (vardec)* '\)' RET (ftype) (block) ;
assign: (vardec|var) '=' (expr)  ;

vardec: INT (identifier)  ;
var: (identifier) ;
expr: (var|number|add|sub|mul|func|gt|lt|eq|le|ge) (expr)* ;
add: (var|number) '\+' (var|number) ;
sub: (var|number) '\-' (var|number) ;
mul: (var|number) '\*' (var|number) ;
div: (var|number) '\/' (var|number) ;
gt: (expr) '>' (expr) ;
block: '{' (statement|NEWLINE)+ '}' ;
ret: RETURN (expr) ;
func: (identifier) '\(' '\)' ;

ftype: 'void' | INT ;
number: '[0-9]+' ;

SPACES: '[ \t;]+' (%ignore) ;
NEWLINE: '(\r?\n[\t ]*)+' (%newline) ;
lt: (expr) '<' (expr) ;
eq: (expr) '==' (expr) ;
le: (expr) '<=' (expr) ;
ge: (expr) '>=' (expr) ;
_if: IF '\(' (expr) '\)' (block); 
NAME: '[a-zA-Z_][a-zA-Z_0-9]*' (%unless 
INT: 'int' ;
IF: 'if';
RET: '->';
RETURN: 'return' ;
) ;
