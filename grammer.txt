start: (NEWLINE|statement|funcdef)+ ;
identifier: NAME;
statement: assign|var|vardec|expr|ret|func|_if|_while|_print|_for ;
funcdef: (identifier) '\(' funcparams? '\)' RET (ftype) (block) ;
funcparams: (vardec)? (',' vardec)* ;
assign: (vardec|var) '=' (expr)  ;
vardec: (vartype) (identifier)  ;
var: (identifier) ;
expr: '\('? (var|number|arith|func|cmp|adr|deref) '\)'? ;
add: (expr) '\+' (expr) ;
sub: (expr) '\-' (expr) ;
mul: (expr) STAR (expr) ;
div: (expr) '\/' (expr) ;
mod: (expr) '%' (expr) ;
_and: (expr) '&' (expr) ;
_or: (expr) '\|' (expr) ;
_xor: (expr) '\^' (expr) ;
invert: '\~' (expr) ;
@arith: add|sub|mul|div|mod|_and|_or|_xor|invert ;
lt: (expr) '<' (expr) ;
gt: (expr) '>' (expr) ;
eq: (expr) '==' (expr) ;
le: (expr) '<=' (expr) ;
ge: (expr) '>=' (expr) ;
ne: (expr) '!=' (expr) ;
adr: '&' (var) ;
deref: STAR (var) ;
@cmp: lt|gt|eq|le|ge|ne ;

block: '{' (statement|NEWLINE)+ '}' ;
ret: RETURN (expr) ;
func: (identifier) '\('(expr)? (',' expr)* '\)' ;

ftype: 'void' | INT ;
vartype: (type|ptr)  ;
type: INT ;
ptr: type STAR ;
number: '[0-9]+' ;

SPACES: '[ \t]+' (%ignore) ;
NEWLINE: '(\r?\n[\t ]*)+' (%newline) ;
_print: PRINT (expr) ;

_if: IF '\(' (expr) '\)' (block); 
_while: WHILE '\(' (expr) '\)' (block) ;
_for: FOR '\(' (statement) ';' (expr) ';' (statement)  '\)' (block) ;
NAME: '[a-zA-Z_][a-zA-Z_0-9]*' (%unless 
INT: 'int' ;
VOID: 'void' ;
IF: 'if';
RET: '->';
RETURN: 'return' ;
WHILE: 'while' ;
PRINT: 'print' ;
FOR: 'for' ;
STAR: '\*' ;
) ;
